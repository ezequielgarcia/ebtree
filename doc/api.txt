2017-03-12 - EBTree API definition
----------------------------------

Concurrent accesses
-------------------

With the introduction of the support for re-entrant operations, it becomes
mandatory to clearly define the exposed API :
  - some functions will probably need to exist in locked and in unlocked form.
    For example, eb_insert_dup() might be called from within certain internal
    functions which already hold a lock while some application code makes use
    of it.

  - some functions will require knowledge of the root while it used not to be
    the case in the past (eg: eb_next, eb_first, eb_delete, ...)

It seems reasonable to consider that all __eb* variants will expect to be
called with whatever lock held, also saving some of them from needing access
to the root. Rare application code making use of these functions expects them
to be inlined and fast, and will very likely run under its own lock when
converted to multi-threading.

The code needs to be updated so that we don't call any non __eb* variant from
within the code.

All __eb* variants will have to be modified to support a root. This also means
that the eba_delete() API will have to change. However as long as we enforce
the fact that the root is not used in non-reentrant code, it is possible to
map eb32_delete(node) and friends to eba32_delete(NULL, node) for backwards
compatibility.


API Hierarchy
-------------

At the moment the mapping between the old an the new API looks like this :

      eb32   eb64   ebim   ebis   ebmb   ebpt   ebst   [Old user-facing API]
       |      |      |      |      |      |      |
     eba32  eba64  ebaim  ebais  ebamb  ebapt  ebast   [New user-facing API]
       |      |      |      |      |      |      |
       +------+------+------+------+------+------+
                            |
        [Memory Model]     eba           ebl           ebm           ebs
                            |             |             |             |
                            +-------------+------+------+-------------+
                                                 |
        [Indexation algorithm]                  ebx                         cbx
                                                 |                           |
                                                 +-------------+-------------+
                                                               |
        [Family]                                             ebtree


API updates
-----------

For 32-bit, list of available inline functions :

static inline struct ebx32_node *ebx32_first(struct ebx_root *root)
  ==> not used internally, only exported

static inline struct ebx32_node *ebx32_last(struct ebx_root *root)
  ==> not used internally, only exported

static inline struct ebx32_node *ebx32_next(struct ebx32_node *eb32)
  ==> not used internally, only exported
  ==> needs to be adapted to take a root (down to ebx_next)

static inline struct ebx32_node *ebx32_prev(struct ebx32_node *eb32)
  ==> not used internally, only exported
  ==> needs to be adapted to take a root (down to ebx_prev)

static inline struct ebx32_node *ebx32_next_dup(struct ebx32_node *eb32)
  ==> not used internally, only exported
  ==> needs to be adapted to take a root (down to ebx_next_dup)

static inline struct ebx32_node *ebx32_prev_dup(struct ebx32_node *eb32)
  ==> not used internally, only exported
  ==> needs to be adapted to take a root (down to ebx_prev_dup)

static inline struct ebx32_node *ebx32_next_unique(struct ebx32_node *eb32)
  ==> not used internally, only exported
  ==> needs to be adapted to take a root (down to ebx_next_unique)

static inline struct ebx32_node *ebx32_prev_unique(struct ebx32_node *eb32)
  ==> not used internally, only exported
  ==> needs to be adapted to take a root (down to ebx_prev_unique)

static inline void ebx32_delete(struct ebx_root *root, struct ebx32_node *eb32)
  ==> not used internally, only exported

static forceinline void __ebx32_delete(struct ebx32_node *eb32)
  ==> not used internally, only exported

static forceinline struct ebx32_node *__ebx32_lookup(struct ebx_root *root, u32 x)
  ==> not used internally, only exported

static forceinline struct ebx32_node *__ebx32i_lookup(struct ebx_root *root, s32 x)
  ==> not used internally, only exported

static forceinline struct ebx32_node *__ebx32_insert(struct ebx_root *root, struct ebx32_node *new)
  ==> not used internally, only exported

static forceinline struct ebx32_node *__ebx32i_insert(struct ebx_root *root, struct ebx32_node *new)
  ==> not used internally, only exported

REGPRM2 struct ebx32_node *ebx32_lookup(struct ebx_root *root, u32 x);
  ==> not used internally, only exported

REGPRM2 struct ebx32_node *ebx32i_lookup(struct ebx_root *root, s32 x);
  ==> not used internally, only exported

REGPRM2 struct ebx32_node *ebx32_lookup_le(struct ebx_root *root, u32 x);
  ==> not used internally, only exported

REGPRM2 struct ebx32_node *ebx32_lookup_ge(struct ebx_root *root, u32 x);
  ==> not used internally, only exported

REGPRM2 struct ebx32_node *ebx32_insert(struct ebx_root *root, struct ebx32_node *new);
  ==> not used internally, only exported

REGPRM2 struct ebx32_node *ebx32i_insert(struct ebx_root *root, struct ebx32_node *new);
  ==> not used internally, only exported


Warning, ebxpt_lookup{,_le,_ge} relies on ebx{32,64}_* depending on the pointer
size.


Most internal functions are in the generic ebxtree.h file :

static inline ebx_troot_t *__ebx_dotag(const struct ebx_root *root, const int tag)
  => internal use only, only manipulates pointers

static inline struct ebx_root *__ebx_untag(const ebx_troot_t *troot, const int tag)
  => internal use only, only manipulates pointers

static inline int __ebx_get_parent_side(ebx_troot_t *troot)
  => internal use only, only manipulates pointers

static inline int __ebx_get_branch_type(ebx_troot_t *troot)
  => internal use only, only manipulates pointers

static inline struct ebx_node *__ebx_root_to_node(struct ebx_root *root)
  => internal use only, only manipulates pointers

static inline void __ebx_setlink(ebx_link_t *dest, const ebx_troot_t *troot)
  => internal use only, writes to <dest>, must be done under WRITE LOCK

static inline ebx_troot_t *__ebx_getroot(const ebx_link_t *src)
  => internal use only, reads from <src>, must be done under READ LOCK

static inline int __ebx_link_is_null(ebx_link_t link)
  => internal use only, only manipulates pointers

static inline int __ebx_is_root(struct ebx_root *root)
  => internal use only, reads from <root>, must be done under READ LOCK, possibly also lockless.

static inline struct ebx_node *__ebx_walk_down(ebx_troot_t *start, unsigned int side)
  => internal use only, reads from <start>, must be done under READ LOCK

void __ebx_delete(struct ebx_node *node)
  => only used by __ebx*_delete() ; and ebx_delete() ; external use only

REGPRM1 struct ebx_node *__ebx_insert_dup(struct ebx_node *sub, struct ebx_node *new)
  ==> internal only

static forceinline void ebx_delete(struct ebx_root *root, struct ebx_node *node)
  => external use only, relies on __ebx*_delete()

static inline struct ebx_node *ebx_insert_dup(struct ebx_root *root, struct ebx_node *sub, struct ebx_node *new)
  ==> not used internally, only exported

static inline int ebx_is_empty(struct ebx_root *root)
  => external use only, reads from <src>, must be done under READ LOCK, possibly also lockless.

static inline int __ebx_is_dup(struct ebx_node *node)
  => internal use only, reads <node>, so lockless.

static inline struct ebx_node *ebx_first(struct ebx_root *root)
  => used by eb*_first(), uses __ebx_walk_down()

static inline struct ebx_node *ebx_last(struct ebx_root *root)
  => used by eb*_last(), uses __ebx_walk_down()

static inline struct ebx_node *ebx_prev(struct ebx_node *node)
  => used by eb*_prev(), uses __ebx_walk_down(), __ebx_getroot, __ebx_is_root

static inline struct ebx_node *ebx_next(struct ebx_node *node)
  => used by eb*_next(), uses __ebx_walk_down(), __ebx_getroot, __ebx_is_root

static inline struct ebx_node *ebx_prev_dup(struct ebx_node *node)
  => used by eb*_prev_dup(), uses __ebx_walk_down(), __ebx_getroot, __ebx_is_root

static inline struct ebx_node *ebx_next_dup(struct ebx_node *node)
  => used by eb*_next_dup(), uses __ebx_walk_down(), __ebx_getroot, __ebx_is_root

static inline struct ebx_node *ebx_prev_unique(struct ebx_node *node)
  => used by eb*_prev_unique(), uses __ebx_walk_down(), __ebx_getroot, __ebx_is_root

static inline struct ebx_node *ebx_next_unique(struct ebx_node *node)
  => used by eb*_next_unique(), uses __ebx_walk_down(), __ebx_getroot, __ebx_is_root
